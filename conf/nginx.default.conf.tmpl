{{/* Get own container object */}}
{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}


{{ range $container := (whereLabelExists . "virtual.host") }}
    {{ $host := index .Labels "virtual.host" }}
    {{ .Name }} => {{ $host }}

{{ /*range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" ","*/ }}

# Upstream: {{ $host }}
upstream {{ $host }} {
	{{ /*range $container := $containers*/ }}
		{{ range $knownNetwork := $CurrentContainer.Networks }}
			{{ range $containerNetwork := $container.Networks }}
				{{ if eq $knownNetwork.Name $containerNetwork.Name }}

					{{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
					{{ $address := where $container.Addresses "Port" $port | first }}

	# {{ $container.Name }} reachable via {{ $containerNetwork.Name }} network
	server {{ $containerNetwork.IP }}:{{ $address.Port }};


				{{ end }}
			{{ end }}
		{{ end }}
	{{ /*end*/ }}
}

# HTTP: {{ $host }}
server {
	listen 80;
	server_name {{ $host }};

	location / {
		proxy_pass http://{{ $host }};
	}
}

# HTTPS: {{ $host }}
server {

	listen 443;
	server_name {{ $host }};

	ssl_certificate           /etc/nginx/server.crt;
	ssl_certificate_key       /etc/nginx/server.key;

	ssl on;
	ssl_session_cache  builtin:1000  shared:SSL:10m;
	ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
	ssl_prefer_server_ciphers on;

	location / {
	  proxy_pass http://{{ $host }};
	}
}


{{ end }}
